#!/bin/bash

if [ ! -d manifests ] ; then
    echo 'No manifests directory found.  Exiting.' >&2
    exit 1
fi

if [ ! -f metadata.json ] ; then
    echo 'No metadata.json found.  Exiting.' >&2
    exit 1
fi

installed_pdk_version=$( pdk --version )

if [ $? -ne 0 -o -z "$installed_pdk_version" ] ; then
    echo "Error checking installed pdk version!" >&2
    exit 1
fi

vercmp () {
    if [ "$#" -ne 2 ] ; then
        echo "vercmp: Expected 2 arguments, got $#!" >&2
        exit 1
    fi

    a=( ${1//./ } )
    b=( ${2//./ } )

    to_test=$(( (${#a[@]} > ${#b[@]}) ? ${#a[@]} : ${#b[@]} ))
    for (( n=0 ; n<$to_test ; n++ )) ; do
        if [ -z "${a[$n]}" ] ; then
            a[$n]=0
        fi
        if [ -z "${b[$n]}" ] ; then
            b[$n]=0
        fi

        if [ "${a[$n]}" -lt "${b[$n]}" ] ; then
            return 2
        elif [ "${a[$n]}" -gt "${b[$n]}" ] ; then
            return 0
        fi
    done

    return 1
}

vercmp "$installed_pdk_version" 1.14.0 # `pdk new test` was added in 1.14.0
if [ $? -le 1 ]; then
    use_erb=0
else
    use_erb=1
fi

set -e

if ! type jq > /dev/null ; then
    echo "Could not find jq executable.  Exiting." >&2
    exit 1
fi

if [ "$( jq -r '.["pdk-version"]' metadata.json )" = null ] ; then
    echo "This does not appear to be a PDK-enabled module.  Run 'pdk convert'?" >&2
    exit 1
fi

if [ $use_erb -gt 0 ] ; then
    # Look for an erb executable.
    erb=''
    erb_paths=(
        $( type -path erb )
        /opt/puppetlabs/puppet/bin/erb
        /opt/puppetlabs/pdk/private/ruby/*/bin/erb
    )

    for (( n=${#erb_paths[@]} ; n>=0 ; n-- )) ; do
        if [ -x "${erb_paths[$n]}" ] ; then
            erb="${erb_paths[$n]}"
            break
        fi
    done

    if [ -z "$erb" ] ; then
        echo "Could not find erb executable.  Exiting." >&2
        exit 1
    fi

    template_url="$( jq -r '."template-url"' metadata.json )"
    if [ "$template_url" = null ] ; then
        echo "Failed to resolve 'template-url' from metadata.json.  Run 'pdk convert'?" >&2
        exit 1
    fi

    template_ref="$( jq -r '."template-ref"' metadata.json )"
    if [ "$template_ref" = null ] ; then
        echo "Failed to resolve 'template-ref' from metadata.json.  Run 'pdk convert'?" >&2
        exit 1
    fi

    case $template_url in
        pdk-default\#*|file:*)
            template_path=${template_url%#*}
            if [ "$template_path" = "pdk-default" ] ; then
                template_path=/opt/puppetlabs/pdk/share/cache/pdk-templates.git
            fi
            template_path=${template_path#file://}
            class_spec=$( git -C "$template_path" show "$template_ref":object_templates/class_spec.erb )
            defined_type_spec=$( git -C "$template_path" show "$template_ref":object_templates/defined_type_spec.erb )
            ;;

        *)
            template_dir=${template_url##*/}
            template_dir=${template_dir%.git}

            tmpdir="$( mktemp -d )"

            echo "Fetching templates from $template_url..." >&2
            pushd "$tmpdir" > /dev/null
            git clone "$template_url" --quiet
            pushd "$template_dir" > /dev/null
            class_spec=$( git show "$template_ref":object_templates/class_spec.erb )
            defined_type_spec=$( git show "$template_ref":object_templates/defined_type_spec.erb )
            popd > /dev/null
            popd > /dev/null

            rm -rf "$tmpdir"
            ;;
    esac
fi

for manifest in $( find manifests -type f -name '*.pp' ) ; do
    class="$( sed -e '/^[[:space:]]*class[[:space:]][[:space:]]*[a-z_:][a-z0-9_:]*[[:space:]({]/!d;' \
                  -e 's/^[[:space:]]*class[[:space:]][[:space:]]*\([a-z_:][a-z0-9_:]*\)[[:space:]({].*/\1/' \
                  < "$manifest" )"
    define="$( sed -e '/^[[:space:]]*define[[:space:]][[:space:]]*[a-z_:][a-z0-9_:]*[[:space:]({]/!d;' \
                   -e 's/^[[:space:]]*define[[:space:]][[:space:]]*\([a-z_:][a-z0-9_:]*\)[[:space:]({].*/\1/' \
                   < "$manifest" )"
    if [ -n "$class" ] ; then
        echo "Found class $class in manifest $manifest." >&2
        test=${manifest/#manifests/spec\/classes}
        test=${test/%.pp/_spec.rb}
        if [ ! -f "$test" ] ; then
            echo "Creating test in $test." >&2
            if [ $use_erb -gt 0 ] ; then
                mkdir -pv "${test%/*}"
                echo "$class_spec" | $erb "name=$class" - > "$test"
            else
                pdk new test -u "$class"
            fi
        else
            echo "Found existing test in $test.  Skipping." >&2
        fi
    elif [ -n "$define" ] ; then
        echo "Found defined type $define in manifest $manifest." >&2
        test=${manifest/#manifests/spec\/defines}
        test=${test/%.pp/_spec.rb}
        if [ ! -f "$test" ] ; then
            echo "Creating test in $test." >&2
            if [ $use_erb -gt 0 ] ; then
                mkdir -pv "${test%/*}"
                echo "$defined_type_spec" | $erb "name=$define" - > "$test"
            else
                pdk new test -u "$define"
            fi
        else
            echo "Found existing test in $test.  Skipping." >&2
        fi
    else
        echo "No classes or defined types found in manifest $manifest." >&2
    fi
done
